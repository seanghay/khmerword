import fs from 'fs/promises'
import { integer, decimal } from './index.js'

function createFixtures() {
  const integers = new Set();
  const decimals = new Set();
  for (let n = 0; n < 18; n++) {
    for (let i = 0; i < 10; i++) {
      const s = i.toString().repeat(n);
      const num = parseInt(s);
      if (!Number.isNaN(num)) integers.add(num);
      const decimalNum = parseFloat(`${s}.${s}`);
      if (!Number.isNaN(decimalNum)) {
        if (!Number.isInteger(decimalNum)) {
          decimals.add(decimalNum)
        }
      };
    }
  }

  return {
    integers: [...integers],
    decimals: [...decimals]
  }
}

let code = "// DOT NOT MODIFY! This file is generated by create-test.js\n" 
code += 'import test from "ava";\n';
code += 'import { integer, decimal } from "./index.js";\n\n';

code += `
test('should not convert NaN', (t) => {
  t.deepEqual(integer(NaN), "")
  t.deepEqual(decimal(NaN), "")  
})

test("convert integer 50", t => {
  t.deepEqual(integer(50), "ហាសិប")
})

`

const fixtures = createFixtures();
for (const i of fixtures.integers) {
  const word1 = integer(i, "-");
  const word2 = decimal(i, "-", "__DEL__");

  code += `test("convert integer ${i}", t => {
  t.deepEqual(integer(${i}, "-"), "${word1}");
  t.deepEqual(decimal(${i}, "-", "__DEL__"), "${word2}");
})\n\n`;
}

for (const d of fixtures.decimals) {
  const word = decimal(d, "-", "__DEL__");
  code += `test("convert decimal ${d}", t => {
  t.deepEqual(decimal(${d}, "-", "__DEL__"), "${word}");
})\n\n`;
}

await fs.writeFile('index.test.js', code, 'utf-8')
